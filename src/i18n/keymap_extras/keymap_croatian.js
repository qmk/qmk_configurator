/* Copyright 2022 - Generated by convert_keymap_extras_header.js
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

export default {
  /*
   * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
   * │ ¸ │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 0 │ ' │ + │       │
   * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
   * │     │ Q │ W │ E │ R │ T │ Z │ U │ I │ O │ P │ Š │ Đ │     │
   * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │
   * │      │ A │ S │ D │ F │ G │ H │ J │ K │ L │ Č │ Ć │ Ž │    │
   * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤
   * │    │ < │ Y │ X │ C │ V │ B │ N │ M │ , │ . │ - │          │
   * ├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
   * │    │    │    │                        │    │    │    │    │
   * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
   */
  // Row 1
  KC_GRV: { name: '¨\n¸', alias: 'HR_CEDL', title: '◌̧ (dead) and ◌̈ (dead)' },
  KC_1: { name: '!\n1', alias: 'HR_1', title: '1 and !' },
  KC_2: { name: '"\n2', alias: 'HR_2', title: '2 and "' },
  KC_3: { name: '#\n3', alias: 'HR_3', title: '3 and #' },
  KC_4: { name: '$\n4', alias: 'HR_4', title: '4 and $' },
  KC_5: { name: '%\n5', alias: 'HR_5', title: '5 and %' },
  KC_6: { name: '&\n6', alias: 'HR_6', title: '6 and &' },
  KC_7: { name: '/\n7', alias: 'HR_7', title: '7 and /' },
  KC_8: { name: '(\n8', alias: 'HR_8', title: '8 and (' },
  KC_9: { name: ')\n9', alias: 'HR_9', title: '9 and )' },
  KC_0: { name: '=\n0', alias: 'HR_0', title: '0 and =' },
  KC_MINS: { name: "?\n'", alias: 'HR_QUOT', title: "' and ?" },
  KC_EQL: { name: '*\n+', alias: 'HR_PLUS', title: '+ and *' },
  // Row 2
  KC_Q: { name: 'Q', alias: 'HR_Q', title: 'q and Q' },
  KC_W: { name: 'W', alias: 'HR_W', title: 'w and W' },
  KC_E: { name: 'E', alias: 'HR_E', title: 'e and E' },
  KC_R: { name: 'R', alias: 'HR_R', title: 'r and R' },
  KC_T: { name: 'T', alias: 'HR_T', title: 't and T' },
  KC_Y: { name: 'Z', alias: 'HR_Z', title: 'z and Z' },
  KC_U: { name: 'U', alias: 'HR_U', title: 'u and U' },
  KC_I: { name: 'I', alias: 'HR_I', title: 'i and I' },
  KC_O: { name: 'O', alias: 'HR_O', title: 'o and O' },
  KC_P: { name: 'P', alias: 'HR_P', title: 'p and P' },
  KC_LBRC: { name: 'Š', alias: 'HR_SCAR', title: 'š and Š' },
  KC_RBRC: { name: 'Đ', alias: 'HR_DSTR', title: 'đ and Đ' },
  // Row 3
  KC_A: { name: 'A', alias: 'HR_A', title: 'a and A' },
  KC_S: { name: 'S', alias: 'HR_S', title: 's and S' },
  KC_D: { name: 'D', alias: 'HR_D', title: 'd and D' },
  KC_F: { name: 'F', alias: 'HR_F', title: 'f and F' },
  KC_G: { name: 'G', alias: 'HR_G', title: 'g and G' },
  KC_H: { name: 'H', alias: 'HR_H', title: 'h and H' },
  KC_J: { name: 'J', alias: 'HR_J', title: 'j and J' },
  KC_K: { name: 'K', alias: 'HR_K', title: 'k and K' },
  KC_L: { name: 'L', alias: 'HR_L', title: 'l and L' },
  KC_SCLN: { name: 'Č', alias: 'HR_CCAR', title: 'č and Č' },
  KC_QUOT: { name: 'Ć', alias: 'HR_CACU', title: 'ć and Ć' },
  KC_NUHS: { name: 'Ž', alias: 'HR_ZCAR', title: 'ž and Ž' },
  // Row 4
  KC_NUBS: { name: '>\n<', alias: 'HR_LABK', title: '< and >' },
  KC_Z: { name: 'Y', alias: 'HR_Y', title: 'y and Y' },
  KC_X: { name: 'X', alias: 'HR_X', title: 'x and X' },
  KC_C: { name: 'C', alias: 'HR_C', title: 'c and C' },
  KC_V: { name: 'V', alias: 'HR_V', title: 'v and V' },
  KC_B: { name: 'B', alias: 'HR_B', title: 'b and B' },
  KC_N: { name: 'N', alias: 'HR_N', title: 'n and N' },
  KC_M: { name: 'M', alias: 'HR_M', title: 'm and M' },
  KC_COMM: { name: ';\n,', alias: 'HR_COMM', title: ', and ;' },
  KC_DOT: { name: ':\n.', alias: 'HR_DOT', title: '. and :' },
  KC_SLSH: { name: '_\n-', alias: 'HR_MINS', title: '- and _' },

  /* Shifted symbols
   * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
   * │ ¨ │ ! │ " │ # │ $ │ % │ & │ / │ ( │ ) │ = │ ? │ * │       │
   * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
   * │     │   │   │   │   │   │   │   │   │   │   │   │   │     │
   * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │
   * │      │   │   │   │   │   │   │   │   │   │   │   │   │    │
   * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤
   * │    │ > │   │   │   │   │   │   │   │ ; │ : │ _ │          │
   * ├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
   * │    │    │    │                        │    │    │    │    │
   * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
   */
  // Row 1
  'S(KC_GRV)': { name: '¨', alias: 'HR_DIAE', title: '◌̈ (dead)' },
  KC_TILD: { name: '¨', alias: 'HR_DIAE', title: '◌̈ (dead)' },
  'S(KC_1)': { name: '!', alias: 'HR_EXLM', title: '!' },
  KC_EXLM: { name: '!', alias: 'HR_EXLM', title: '!' },
  'S(KC_2)': { name: '"', alias: 'HR_DQUO', title: '"' },
  KC_AT: { name: '"', alias: 'HR_DQUO', title: '"' },
  'S(KC_3)': { name: '#', alias: 'HR_HASH', title: '#' },
  KC_HASH: { name: '#', alias: 'HR_HASH', title: '#' },
  'S(KC_4)': { name: '$', alias: 'HR_DLR', title: '$' },
  KC_DLR: { name: '$', alias: 'HR_DLR', title: '$' },
  'S(KC_5)': { name: '%', alias: 'HR_PERC', title: '%' },
  KC_PERC: { name: '%', alias: 'HR_PERC', title: '%' },
  'S(KC_6)': { name: '&', alias: 'HR_AMPR', title: '&' },
  KC_CIRC: { name: '&', alias: 'HR_AMPR', title: '&' },
  'S(KC_7)': { name: '/', alias: 'HR_SLSH', title: '/' },
  KC_AMPR: { name: '/', alias: 'HR_SLSH', title: '/' },
  'S(KC_8)': { name: '(', alias: 'HR_LPRN', title: '(' },
  KC_ASTR: { name: '(', alias: 'HR_LPRN', title: '(' },
  'S(KC_9)': { name: ')', alias: 'HR_RPRN', title: ')' },
  KC_LPRN: { name: ')', alias: 'HR_RPRN', title: ')' },
  'S(KC_0)': { name: '=', alias: 'HR_EQL', title: '=' },
  KC_RPRN: { name: '=', alias: 'HR_EQL', title: '=' },
  'S(KC_MINS)': { name: '?', alias: 'HR_QUES', title: '?' },
  KC_UNDS: { name: '?', alias: 'HR_QUES', title: '?' },
  'S(KC_EQL)': { name: '*', alias: 'HR_ASTR', title: '*' },
  KC_PLUS: { name: '*', alias: 'HR_ASTR', title: '*' },
  // Row 4
  'S(KC_NUBS)': { name: '>', alias: 'HR_RABK', title: '>' },
  'S(KC_COMM)': { name: ';', alias: 'HR_SCLN', title: ';' },
  KC_LT: { name: ';', alias: 'HR_SCLN', title: ';' },
  'S(KC_DOT)': { name: ':', alias: 'HR_COLN', title: ':' },
  KC_GT: { name: ':', alias: 'HR_COLN', title: ':' },
  'S(KC_SLSH)': { name: '_', alias: 'HR_UNDS', title: '_' },
  KC_QUES: { name: '_', alias: 'HR_UNDS', title: '_' },

  /* AltGr symbols
   * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
   * │   │ ~ │ ˇ │ ^ │ ˘ │ ° │ ˛ │ ` │ ˙ │ ´ │ ˝ │   │   │       │
   * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
   * │     │ \ │ | │ € │   │   │   │   │   │   │   │ ÷ │ × │     │
   * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │
   * │      │   │   │   │ [ │ ] │   │   │ ł │ Ł │   │ ß │ ¤ │    │
   * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤
   * │    │   │   │   │   │ @ │ { │ } │ § │   │   │   │          │
   * ├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
   * │    │    │    │                        │    │    │    │    │
   * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
   */
  // Row 1
  'ALGR(KC_1)': { name: '~', alias: 'HR_TILD', title: '~' },
  'ALGR(KC_2)': { name: 'ˇ', alias: 'HR_CARN', title: '◌̌ (dead)' },
  'ALGR(KC_3)': { name: '^', alias: 'HR_CIRC', title: '◌̂ (dead)' },
  'ALGR(KC_4)': { name: '˘', alias: 'HR_BREV', title: '◌̆ (dead)' },
  'ALGR(KC_5)': { name: '°', alias: 'HR_RNGA', title: '◌̊ (dead)' },
  'ALGR(KC_6)': { name: '˛', alias: 'HR_OGON', title: '◌̨ (dead)' },
  'ALGR(KC_7)': { name: '`', alias: 'HR_GRV', title: '`' },
  'ALGR(KC_8)': { name: '˙', alias: 'HR_DOTA', title: '◌̇ (dead)' },
  'ALGR(KC_9)': { name: '´', alias: 'HR_ACUT', title: '◌́ (dead)' },
  'ALGR(KC_0)': { name: '˝', alias: 'HR_DACU', title: '◌̋ (dead)' },
  // Row 2
  'ALGR(KC_Q)': { name: '\\', alias: 'HR_BSLS', title: '\\' },
  'ALGR(KC_W)': { name: '|', alias: 'HR_PIPE', title: '|' },
  'ALGR(KC_E)': { name: '€', alias: 'HR_EURO', title: '€' },
  'ALGR(KC_LBRC)': { name: '÷', alias: 'HR_DIV', title: '÷' },
  'ALGR(KC_RBRC)': { name: '×', alias: 'HR_MUL', title: '×' },
  // Row 3
  'ALGR(KC_F)': { name: '[', alias: 'HR_LBRC', title: '[' },
  'ALGR(KC_G)': { name: ']', alias: 'HR_RBRC', title: ']' },
  'ALGR(KC_K)': { name: 'ł', alias: 'HR_LLST', title: 'ł' },
  'ALGR(KC_L)': { name: 'Ł', alias: 'HR_CLST', title: 'Ł' },
  'ALGR(KC_QUOT)': { name: 'ß', alias: 'HR_SS', title: 'ß' },
  'ALGR(KC_NUHS)': { name: '¤', alias: 'HR_CURR', title: '¤' },
  // Row 4
  'ALGR(KC_V)': { name: '@', alias: 'HR_AT', title: '@' },
  'ALGR(KC_B)': { name: '{', alias: 'HR_LCBR', title: '{' },
  'ALGR(KC_N)': { name: '}', alias: 'HR_RCBR', title: '}' },
  'ALGR(KC_M)': { name: '§', alias: 'HR_SECT', title: '§' },

  /* Other keys */
  KC_BSLS: { name: 'Ž', title: 'Ž' },
  'S(KC_BSLS)': { name: 'Ž', title: 'Ž' },
  KC_LCBR: { name: 'Š', alias: 'S(HR_SCAR)', title: 'Š' },
  KC_RCBR: { name: 'Đ', alias: 'S(HR_DSTR)', title: 'Đ' },
  KC_COLN: { name: 'Č', alias: 'S(HR_CCAR)', title: 'Č' },
  KC_PIPE: { name: 'Ž', alias: 'S(HR_ZCAR)', title: 'Ž' },
  KC_DQUO: { name: 'Ć', alias: 'S(HR_CACU)', title: 'Ć' },

  SC_LSPO: { name: 'LS / )', title: 'Left Shift when held, ) when tapped' },
  SC_RSPC: { name: 'RS / =', title: 'Right Shift when held, = when tapped' },
  SC_LCPO: { name: 'LC / )', title: 'Left Control when held, ) when tapped' },
  SC_RCPC: { name: 'RC / =', title: 'Right Control when held, = when tapped' },
  SC_LAPO: { name: 'LA / )', title: 'Left Alt when held, ) when tapped' },
  SC_RAPC: { name: 'RA / =', title: 'Right Alt when held, = when tapped' },

  QK_GESC: {
    name: '¸/¨\nEsc',
    title: 'Esc normally, but ¸ when GUI is active or ¨ when Shift is active'
  }
};
