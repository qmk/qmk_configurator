/* Copyright 2022 - Generated by convert_keymap_extras_header.js
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

export default {
  /*
   * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
   * │ ` │ Ą │ Č │ Ę │ Ė │ Į │ Š │ Ų │ Ū │ 9 │ 0 │ - │ Ž │       │
   * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
   * │     │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │ [ │ ] │  \  │
   * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤
   * │      │ A │ S │ D │ F │ G │ H │ J │ K │ L │ ; │ ' │        │
   * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤
   * │        │ Z │ X │ C │ V │ B │ N │ M │ , │ . │ / │          │
   * ├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
   * │    │    │    │                        │    │    │    │    │
   * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
   */
  // Row 1
  KC_GRV: { name: '~\n`', alias: 'LT_GRV', title: '` and ~' },
  KC_1: { name: 'Ą', alias: 'LT_AOGO', title: 'ą and Ą' },
  KC_2: { name: 'Č', alias: 'LT_CCAR', title: 'č and Č' },
  KC_3: { name: 'Ę', alias: 'LT_EOGO', title: 'ę and Ę' },
  KC_4: { name: 'Ė', alias: 'LT_EDOT', title: 'ė and Ė' },
  KC_5: { name: 'Į', alias: 'LT_IOGO', title: 'į and Į' },
  KC_6: { name: 'Š', alias: 'LT_SCAR', title: 'š and Š' },
  KC_7: { name: 'Ų', alias: 'LT_UOGO', title: 'ų and Ų' },
  KC_8: { name: 'Ū', alias: 'LT_UMAC', title: 'ū and Ū' },
  KC_9: { name: '(\n9', alias: 'LT_9', title: '9 and (' },
  KC_0: { name: ')\n0', alias: 'LT_0', title: '0 and )' },
  KC_MINS: { name: '_\n-', alias: 'LT_MINS', title: '- and _' },
  KC_EQL: { name: 'Ž', alias: 'LT_ZCAR', title: 'ž and Ž' },
  // Row 2
  KC_Q: { name: 'Q', alias: 'LT_Q', title: 'q and Q' },
  KC_W: { name: 'W', alias: 'LT_W', title: 'w and W' },
  KC_E: { name: 'E', alias: 'LT_E', title: 'e and E' },
  KC_R: { name: 'R', alias: 'LT_R', title: 'r and R' },
  KC_T: { name: 'T', alias: 'LT_T', title: 't and T' },
  KC_Y: { name: 'Y', alias: 'LT_Y', title: 'y and Y' },
  KC_U: { name: 'U', alias: 'LT_U', title: 'u and U' },
  KC_I: { name: 'I', alias: 'LT_I', title: 'i and I' },
  KC_O: { name: 'O', alias: 'LT_O', title: 'o and O' },
  KC_P: { name: 'P', alias: 'LT_P', title: 'p and P' },
  KC_LBRC: { name: '{\n[', alias: 'LT_LBRC', title: '[ and {' },
  KC_RBRC: { name: '}\n]', alias: 'LT_RBRC', title: '] and }' },
  // Row 3
  KC_A: { name: 'A', alias: 'LT_A', title: 'a and A' },
  KC_S: { name: 'S', alias: 'LT_S', title: 's and S' },
  KC_D: { name: 'D', alias: 'LT_D', title: 'd and D' },
  KC_F: { name: 'F', alias: 'LT_F', title: 'f and F' },
  KC_G: { name: 'G', alias: 'LT_G', title: 'g and G' },
  KC_H: { name: 'H', alias: 'LT_H', title: 'h and H' },
  KC_J: { name: 'J', alias: 'LT_J', title: 'j and J' },
  KC_K: { name: 'K', alias: 'LT_K', title: 'k and K' },
  KC_L: { name: 'L', alias: 'LT_L', title: 'l and L' },
  KC_SCLN: { name: ':\n;', alias: 'LT_SCLN', title: '; and :' },
  KC_QUOT: { name: '"\n\'', alias: 'LT_QUOT', title: '\' and "' },
  KC_BSLS: { name: '|\n\\', alias: 'LT_BSLS', title: '\\ and |' },
  // Row 4
  KC_Z: { name: 'Z', alias: 'LT_Z', title: 'z and Z' },
  KC_X: { name: 'X', alias: 'LT_X', title: 'x and X' },
  KC_C: { name: 'C', alias: 'LT_C', title: 'c and C' },
  KC_V: { name: 'V', alias: 'LT_V', title: 'v and V' },
  KC_B: { name: 'B', alias: 'LT_B', title: 'b and B' },
  KC_N: { name: 'N', alias: 'LT_N', title: 'n and N' },
  KC_M: { name: 'M', alias: 'LT_M', title: 'm and M' },
  KC_COMM: { name: '<\n,', alias: 'LT_COMM', title: ', and <' },
  KC_DOT: { name: '>\n.', alias: 'LT_DOT', title: '. and >' },
  KC_SLSH: { name: '?\n/', alias: 'LT_SLSH', title: '/ and ?' },

  /* Shifted symbols
   * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
   * │ ~ │   │   │   │   │   │   │   │   │ ( │ ) │ _ │   │       │
   * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
   * │     │   │   │   │   │   │   │   │   │   │   │ { │ } │  |  │
   * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤
   * │      │   │   │   │   │   │   │   │   │   │ : │ " │        │
   * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤
   * │        │   │   │   │   │   │   │   │ < │ > │ ? │          │
   * ├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
   * │    │    │    │                        │    │    │    │    │
   * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
   */
  // Row 1
  'S(KC_GRV)': { name: '~', alias: 'LT_TILD', title: '~' },
  KC_TILD: { name: '~', alias: 'LT_TILD', title: '~' },
  'S(KC_9)': { name: '(', alias: 'LT_LPRN', title: '(' },
  KC_LPRN: { name: '(', alias: 'LT_LPRN', title: '(' },
  'S(KC_0)': { name: ')', alias: 'LT_RPRN', title: ')' },
  KC_RPRN: { name: ')', alias: 'LT_RPRN', title: ')' },
  'S(KC_MINS)': { name: '_', alias: 'LT_UNDS', title: '_' },
  KC_UNDS: { name: '_', alias: 'LT_UNDS', title: '_' },
  // Row 2
  'S(KC_LBRC)': { name: '{', alias: 'LT_LCBR', title: '{' },
  KC_LCBR: { name: '{', alias: 'LT_LCBR', title: '{' },
  'S(KC_RBRC)': { name: '}', alias: 'LT_RCBR', title: '}' },
  KC_RCBR: { name: '}', alias: 'LT_RCBR', title: '}' },
  // Row 3
  'S(KC_SCLN)': { name: ':', alias: 'LT_COLN', title: ':' },
  KC_COLN: { name: ':', alias: 'LT_COLN', title: ':' },
  'S(KC_QUOT)': { name: '"', alias: 'LT_DQUO', title: '"' },
  KC_DQUO: { name: '"', alias: 'LT_DQUO', title: '"' },
  'S(KC_BSLS)': { name: '|', alias: 'LT_PIPE', title: '|' },
  KC_PIPE: { name: '|', alias: 'LT_PIPE', title: '|' },
  // Row 4
  'S(KC_COMM)': { name: '<', alias: 'LT_LABK', title: '<' },
  KC_LT: { name: '<', alias: 'LT_LABK', title: '<' },
  'S(KC_DOT)': { name: '>', alias: 'LT_RABK', title: '>' },
  KC_GT: { name: '>', alias: 'LT_RABK', title: '>' },
  'S(KC_SLSH)': { name: '?', alias: 'LT_QUES', title: '?' },
  KC_QUES: { name: '?', alias: 'LT_QUES', title: '?' },

  /* AltGr symbols
   * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
   * │   │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │   │   │   │ = │       │
   * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
   * │     │   │   │ € │   │   │   │   │   │   │   │   │   │     │
   * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤
   * │      │   │   │   │   │   │   │   │   │   │   │   │        │
   * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤
   * │        │   │   │   │   │   │   │   │   │   │   │          │
   * ├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
   * │    │    │    │                        │    │    │    │    │
   * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
   */
  // Row 1
  'ALGR(KC_1)': { name: '1', alias: 'LT_1', title: '1' },
  'ALGR(KC_2)': { name: '2', alias: 'LT_2', title: '2' },
  'ALGR(KC_3)': { name: '3', alias: 'LT_3', title: '3' },
  'ALGR(KC_4)': { name: '4', alias: 'LT_4', title: '4' },
  'ALGR(KC_5)': { name: '5', alias: 'LT_5', title: '5' },
  'ALGR(KC_6)': { name: '6', alias: 'LT_6', title: '6' },
  'ALGR(KC_7)': { name: '7', alias: 'LT_7', title: '7' },
  'ALGR(KC_8)': { name: '8', alias: 'LT_8', title: '8' },
  'ALGR(KC_EQL)': { name: '=', alias: 'LT_EQL', title: '=' },
  // Row 2
  'ALGR(KC_E)': { name: '€', alias: 'LT_EURO', title: '€' },

  /* Shift+AltGr symbols
   * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
   * │   │ ! │ @ │ # │ $ │ % │ ^ │ & │ * │   │   │   │ + │       │
   * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
   * │     │   │   │   │   │   │   │   │   │   │   │   │   │     │
   * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤
   * │      │   │   │   │   │   │   │   │   │   │   │   │        │
   * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤
   * │        │   │   │   │   │   │   │   │   │   │   │          │
   * ├────┬───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
   * │    │    │    │                        │    │    │    │    │
   * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
   */
  // Row 1
  'S(ALGR(KC_1))': { name: '!', alias: 'LT_EXLM', title: '!' },
  'S(ALGR(KC_2))': { name: '@', alias: 'LT_AT', title: '@' },
  'S(ALGR(KC_3))': { name: '#', alias: 'LT_HASH', title: '#' },
  'S(ALGR(KC_4))': { name: '$', alias: 'LT_DLR', title: '$' },
  'S(ALGR(KC_5))': { name: '%', alias: 'LT_PERC', title: '%' },
  'S(ALGR(KC_6))': { name: '^', alias: 'LT_CIRC', title: '^' },
  'S(ALGR(KC_7))': { name: '&', alias: 'LT_AMPR', title: '&' },
  'S(ALGR(KC_8))': { name: '*', alias: 'LT_ASTR', title: '*' },
  'S(ALGR(KC_EQL))': { name: '+', alias: 'LT_PLUS', title: '+' },

  /* Other keys */
  KC_NUHS: { name: '|\n\\', title: '\\ and |' },
  'S(KC_NUHS)': { name: '|', title: '|' },
  KC_NUBS: { name: '|\n\\', title: '\\ and |' },
  'S(KC_NUBS)': { name: '|', title: '|' },
  KC_EXLM: { name: 'Ą', alias: 'S(LT_AOGO)', title: 'Ą' },
  KC_AT: { name: 'Č', alias: 'S(LT_CCAR)', title: 'Č' },
  KC_HASH: { name: 'Ę', alias: 'S(LT_EOGO)', title: 'Ę' },
  KC_DLR: { name: 'Ė', alias: 'S(LT_EDOT)', title: 'Ė' },
  KC_PERC: { name: 'Į', alias: 'S(LT_IOGO)', title: 'Į' },
  KC_CIRC: { name: 'Š', alias: 'S(LT_SCAR)', title: 'Š' },
  KC_AMPR: { name: 'Ų', alias: 'S(LT_UOGO)', title: 'Ų' },
  KC_ASTR: { name: 'Ū', alias: 'S(LT_UMAC)', title: 'Ū' },
  KC_PLUS: { name: 'Ž', alias: 'S(LT_ZCAR)', title: 'Ž' },

  SC_LSPO: { name: 'LS / (', title: 'Left Shift when held, ( when tapped' },
  SC_RSPC: { name: 'RS / )', title: 'Right Shift when held, ) when tapped' },
  SC_LCPO: { name: 'LC / (', title: 'Left Control when held, ( when tapped' },
  SC_RCPC: { name: 'RC / )', title: 'Right Control when held, ) when tapped' },
  SC_LAPO: { name: 'LA / (', title: 'Left Alt when held, ( when tapped' },
  SC_RAPC: { name: 'RA / )', title: 'Right Alt when held, ) when tapped' },

  QK_GESC: {
    name: '`/~\nEsc',
    title: 'Esc normally, but ` when GUI is active or ~ when Shift is active'
  }
};
