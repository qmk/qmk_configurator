/* Copyright 2022 - Generated by convert_keymap_extras_header.js
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

export default {
  /*
   * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
   * │ + │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 0 │ / │ - │       │
   * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
   * │     │ F │ G │ Ğ │ I │ O │ D │ R │ N │ H │ P │ Q │ W │     │
   * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │
   * │      │ U │ İ │ E │ A │ Ü │ T │ K │ M │ L │ Y │ Ş │ X │    │
   * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤
   * │    │ < │ J │ Ö │ V │ C │ Ç │ Z │ S │ B │ . │ , │          │
   * ├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
   * │    │    │    │                        │    │    │    │    │
   * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
   */
  // Row 1
  KC_GRV: { name: '*\n+', alias: 'TR_PLUS', title: '+ and *' },
  KC_1: { name: '!\n1', alias: 'TR_1', title: '1 and !' },
  KC_2: { name: '"\n2', alias: 'TR_2', title: '2 and "' },
  KC_3: { name: '^\n3', alias: 'TR_3', title: '3 and ^' },
  KC_4: { name: '$\n4', alias: 'TR_4', title: '4 and $' },
  KC_5: { name: '%\n5', alias: 'TR_5', title: '5 and %' },
  KC_6: { name: '&\n6', alias: 'TR_6', title: '6 and &' },
  KC_7: { name: "'\n7", alias: 'TR_7', title: "7 and '" },
  KC_8: { name: '(\n8', alias: 'TR_8', title: '8 and (' },
  KC_9: { name: ')\n9', alias: 'TR_9', title: '9 and )' },
  KC_0: { name: '=\n0', alias: 'TR_0', title: '0 and =' },
  KC_MINS: { name: '?\n/', alias: 'TR_SLSH', title: '/ and ?' },
  KC_EQL: { name: '_\n-', alias: 'TR_MINS', title: '- and _' },
  // Row 2
  KC_Q: { name: 'F', alias: 'TR_F', title: 'f and F' },
  KC_W: { name: 'G', alias: 'TR_G', title: 'g and G' },
  KC_E: { name: 'Ğ', alias: 'TR_GBRV', title: 'ğ and Ğ' },
  KC_R: { name: 'I', alias: 'TR_I', title: 'i and I' },
  KC_T: { name: 'O', alias: 'TR_O', title: 'o and O' },
  KC_Y: { name: 'D', alias: 'TR_D', title: 'd and D' },
  KC_U: { name: 'R', alias: 'TR_R', title: 'r and R' },
  KC_I: { name: 'N', alias: 'TR_N', title: 'n and N' },
  KC_O: { name: 'H', alias: 'TR_H', title: 'h and H' },
  KC_P: { name: 'P', alias: 'TR_P', title: 'p and P' },
  KC_LBRC: { name: 'Q', alias: 'TR_Q', title: 'q and Q' },
  KC_RBRC: { name: 'W', alias: 'TR_W', title: 'w and W' },
  // Row 3
  KC_A: { name: 'U', alias: 'TR_U', title: 'u and U' },
  KC_S: { name: 'İ', alias: 'TR_IDOT', title: 'i̇ and İ' },
  KC_D: { name: 'E', alias: 'TR_E', title: 'e and E' },
  KC_F: { name: 'A', alias: 'TR_A', title: 'a and A' },
  KC_G: { name: 'Ü', alias: 'TR_UDIA', title: 'ü and Ü' },
  KC_H: { name: 'T', alias: 'TR_T', title: 't and T' },
  KC_J: { name: 'K', alias: 'TR_K', title: 'k and K' },
  KC_K: { name: 'M', alias: 'TR_M', title: 'm and M' },
  KC_L: { name: 'L', alias: 'TR_L', title: 'l and L' },
  KC_SCLN: { name: 'Y', alias: 'TR_Y', title: 'y and Y' },
  KC_QUOT: { name: 'Ş', alias: 'TR_SCED', title: 'ş and Ş' },
  KC_NUHS: { name: 'X', alias: 'TR_X', title: 'x and X' },
  // Row 4
  KC_NUBS: { name: '>\n<', alias: 'TR_LABK', title: '< and >' },
  KC_Z: { name: 'J', alias: 'TR_J', title: 'j and J' },
  KC_X: { name: 'Ö', alias: 'TR_ODIA', title: 'ö and Ö' },
  KC_C: { name: 'V', alias: 'TR_V', title: 'v and V' },
  KC_V: { name: 'C', alias: 'TR_C', title: 'c and C' },
  KC_B: { name: 'Ç', alias: 'TR_CCED', title: 'ç and Ç' },
  KC_N: { name: 'Z', alias: 'TR_Z', title: 'z and Z' },
  KC_M: { name: 'S', alias: 'TR_S', title: 's and S' },
  KC_COMM: { name: 'B', alias: 'TR_B', title: 'b and B' },
  KC_DOT: { name: ':\n.', alias: 'TR_DOT', title: '. and :' },
  KC_SLSH: { name: ';\n,', alias: 'TR_COMM', title: ', and ;' },

  /* Shifted symbols
   * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
   * │ * │ ! │ " │ ^ │ $ │ % │ & │ ' │ ( │ ) │ = │ ? │ _ │       │
   * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
   * │     │   │   │   │   │   │   │   │   │   │   │   │   │     │
   * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │
   * │      │   │   │   │   │   │   │   │   │   │   │   │   │    │
   * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤
   * │    │ > │   │   │   │   │   │   │   │   │ : │ ; │          │
   * ├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
   * │    │    │    │                        │    │    │    │    │
   * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
   */
  // Row 1
  'S(KC_GRV)': { name: '*', alias: 'TR_ASTR', title: '*' },
  KC_TILD: { name: '*', alias: 'TR_ASTR', title: '*' },
  'S(KC_1)': { name: '!', alias: 'TR_EXLM', title: '!' },
  KC_EXLM: { name: '!', alias: 'TR_EXLM', title: '!' },
  'S(KC_2)': { name: '"', alias: 'TR_DQUO', title: '"' },
  KC_AT: { name: '"', alias: 'TR_DQUO', title: '"' },
  'S(KC_3)': { name: '^', alias: 'TR_CIRC', title: '◌̂ (dead)' },
  KC_HASH: { name: '^', alias: 'TR_CIRC', title: '◌̂ (dead)' },
  'S(KC_4)': { name: '$', alias: 'TR_DLR', title: '$' },
  KC_DLR: { name: '$', alias: 'TR_DLR', title: '$' },
  'S(KC_5)': { name: '%', alias: 'TR_PERC', title: '%' },
  KC_PERC: { name: '%', alias: 'TR_PERC', title: '%' },
  'S(KC_6)': { name: '&', alias: 'TR_AMPR', title: '&' },
  KC_CIRC: { name: '&', alias: 'TR_AMPR', title: '&' },
  'S(KC_7)': { name: "'", alias: 'TR_QUOT', title: "'" },
  KC_AMPR: { name: "'", alias: 'TR_QUOT', title: "'" },
  'S(KC_8)': { name: '(', alias: 'TR_LPRN', title: '(' },
  KC_ASTR: { name: '(', alias: 'TR_LPRN', title: '(' },
  'S(KC_9)': { name: ')', alias: 'TR_RPRN', title: ')' },
  KC_LPRN: { name: ')', alias: 'TR_RPRN', title: ')' },
  'S(KC_0)': { name: '=', alias: 'TR_EQL', title: '=' },
  KC_RPRN: { name: '=', alias: 'TR_EQL', title: '=' },
  'S(KC_MINS)': { name: '?', alias: 'TR_QUES', title: '?' },
  KC_UNDS: { name: '?', alias: 'TR_QUES', title: '?' },
  'S(KC_EQL)': { name: '_', alias: 'TR_UNDS', title: '_' },
  KC_PLUS: { name: '_', alias: 'TR_UNDS', title: '_' },
  // Row 4
  'S(KC_NUBS)': { name: '>', alias: 'TR_RABK', title: '>' },
  'S(KC_DOT)': { name: ':', alias: 'TR_COLN', title: ':' },
  KC_GT: { name: ':', alias: 'TR_COLN', title: ':' },
  'S(KC_SLSH)': { name: ';', alias: 'TR_SCLN', title: ';' },
  KC_QUES: { name: ';', alias: 'TR_SCLN', title: ';' },

  /* AltGr symbols
   * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
   * │ ¬ │ ¹ │ ² │ # │ ¼ │ ½ │ ¾ │ { │ [ │ ] │ } │ \ │ | │       │
   * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
   * │     │ @ │   │   │ ¶ │   │ ¥ │   │   │ Ø │ £ │ ¨ │ ~ │     │
   * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │
   * │      │ Æ │ ß │ € │   │   │ ₺ │   │   │   │ ´ │   │ ` │    │
   * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤
   * │    │   │ « │ » │ ¢ │   │   │   │ µ │ × │ ÷ │ - │          │
   * ├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
   * │    │    │    │                        │    │    │    │    │
   * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
   */
  // Row 1
  'ALGR(KC_GRV)': { name: '¬', alias: 'TR_NOT', title: '¬' },
  'ALGR(KC_1)': { name: '¹', alias: 'TR_SUP1', title: '¹' },
  'ALGR(KC_2)': { name: '²', alias: 'TR_SUP2', title: '²' },
  'ALGR(KC_3)': { name: '#', alias: 'TR_HASH', title: '#' },
  'ALGR(KC_4)': { name: '¼', alias: 'TR_QRTR', title: '¼' },
  'ALGR(KC_5)': { name: '½', alias: 'TR_HALF', title: '½' },
  'ALGR(KC_6)': { name: '¾', alias: 'TR_TQTR', title: '¾' },
  'ALGR(KC_7)': { name: '{', alias: 'TR_LCBR', title: '{' },
  'ALGR(KC_8)': { name: '[', alias: 'TR_LBRC', title: '[' },
  'ALGR(KC_9)': { name: ']', alias: 'TR_RBRC', title: ']' },
  'ALGR(KC_0)': { name: '}', alias: 'TR_RCBR', title: '}' },
  'ALGR(KC_MINS)': { name: '\\', alias: 'TR_BSLS', title: '\\' },
  'ALGR(KC_EQL)': { name: '|', alias: 'TR_PIPE', title: '|' },
  // Row 2
  'ALGR(KC_Q)': { name: '@', alias: 'TR_AT', title: '@' },
  'ALGR(KC_R)': { name: '¶', alias: 'TR_PILC', title: '¶' },
  'ALGR(KC_Y)': { name: '¥', alias: 'TR_YEN', title: '¥' },
  'ALGR(KC_O)': { name: 'Ø', alias: 'TR_OSTR', title: 'Ø' },
  'ALGR(KC_P)': { name: '£', alias: 'TR_PND', title: '£' },
  'ALGR(KC_LBRC)': { name: '¨', alias: 'TR_DIAE', title: '◌̈ (dead)' },
  'ALGR(KC_RBRC)': { name: '~', alias: 'TR_TILD', title: '◌̃ (dead)' },
  // Row 3
  'ALGR(KC_A)': { name: 'Æ', alias: 'TR_AE', title: 'Æ' },
  'ALGR(KC_S)': { name: 'ß', alias: 'TR_SS', title: 'ß' },
  'ALGR(KC_D)': { name: '€', alias: 'TR_EURO', title: '€' },
  'ALGR(KC_H)': { name: '₺', alias: 'TR_LIRA', title: '₺' },
  'ALGR(KC_SCLN)': { name: '´', alias: 'TR_ACUT', title: '◌́ (dead)' },
  'ALGR(KC_NUHS)': { name: '`', alias: 'TR_GRV', title: '◌̀ (dead)' },
  // Row 4
  'ALGR(KC_Z)': { name: '«', alias: 'TR_LDAQ', title: '«' },
  'ALGR(KC_X)': { name: '»', alias: 'TR_RDAQ', title: '»' },
  'ALGR(KC_C)': { name: '¢', alias: 'TR_CENT', title: '¢' },
  'ALGR(KC_M)': { name: 'µ', alias: 'TR_MICR', title: 'µ' },
  'ALGR(KC_COMM)': { name: '×', alias: 'TR_MUL', title: '×' },
  'ALGR(KC_DOT)': { name: '÷', alias: 'TR_DIV', title: '÷' },
  'ALGR(KC_SLSH)': { name: 'SHYP', alias: 'TR_SHYP', title: 'Soft hyphen' },

  /* Shift+AltGr symbols
   * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
   * │   │   │   │ ³ │ ¤ │   │   │   │   │   │   │ ¿ │   │       │
   * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
   * │     │   │   │   │ ® │   │   │   │   │   │   │   │   │     │
   * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │
   * │      │   │ § │   │ ª │   │   │   │   │   │   │   │   │    │
   * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴────┤
   * │    │ ¦ │   │   │ © │   │   │   │ º │   │   │   │          │
   * ├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤
   * │    │    │    │                        │    │    │    │    │
   * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
   */
  // Row 1
  'S(ALGR(KC_3))': { name: '³', alias: 'TR_SUP3', title: '³' },
  'S(ALGR(KC_4))': { name: '¤', alias: 'TR_CURR', title: '¤' },
  'S(ALGR(KC_MINS))': { name: '¿', alias: 'TR_IQUE', title: '¿' },
  // Row 2
  'S(ALGR(KC_R))': { name: '®', alias: 'TR_REGD', title: '®' },
  // Row 3
  'S(ALGR(KC_S))': { name: '§', alias: 'TR_SECT', title: '§' },
  'S(ALGR(KC_F))': { name: 'ª', alias: 'TR_FORD', title: 'ª' },
  // Row 4
  'S(ALGR(KC_NUBS))': { name: '¦', alias: 'TR_BRKP', title: '¦' },
  'S(ALGR(KC_C))': { name: '©', alias: 'TR_COPY', title: '©' },
  'S(ALGR(KC_M))': { name: 'º', alias: 'TR_MORD', title: 'º' },

  /* Other keys */
  KC_BSLS: { name: 'X', title: 'X' },
  'S(KC_BSLS)': { name: 'X', title: 'X' },
  KC_LCBR: { name: 'Q', alias: 'S(TR_Q)', title: 'Q' },
  KC_RCBR: { name: 'W', alias: 'S(TR_W)', title: 'W' },
  KC_LT: { name: 'B', alias: 'S(TR_B)', title: 'B' },
  KC_COLN: { name: 'Y', alias: 'S(TR_Y)', title: 'Y' },
  KC_PIPE: { name: 'X', alias: 'TR_X', title: 'S' },
  KC_DQUO: { name: 'Ş', alias: 'S(TR_SCED)', title: 'Ş' },

  SC_LSPO: { name: 'LS / )', title: 'Left Shift when held, ) when tapped' },
  SC_RSPC: { name: 'RS / =', title: 'Right Shift when held, = when tapped' },
  SC_LCPO: { name: 'LC / )', title: 'Left Control when held, ) when tapped' },
  SC_RCPC: { name: 'RC / =', title: 'Right Control when held, = when tapped' },
  SC_LAPO: { name: 'LA / )', title: 'Left Alt when held, ) when tapped' },
  SC_RAPC: { name: 'RA / =', title: 'Right Alt when held, = when tapped' },

  QK_GESC: {
    name: '+/*\nEsc',
    title: 'Esc normally, but + when GUI is active or * when Shift is active'
  }
};
